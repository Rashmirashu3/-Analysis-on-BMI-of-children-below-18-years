MLE_Mean<-xu_hat-xn_hat
#Standard deviation
MLE_SD_U<-(1/length(heights_u))*sum(x-xu_hat)^2
MLE_SD_N<-(1/length(heights_n))*sum(x-xn_hat)^2
MLE_SD<-MLE_SD_U-MLE_SD_N
MLE_SD
MLE_Mean
MLE_SD
y<- rnorm(100,mean=mean(heights_n),sd=sd(heights_n))
LL <- function(mean,sd)
{-sum(dnorm(y,mean,sd,log=TRUE))}
m1<-mle2(LL,start=list(mean=1,sd=0))
summary(m1)
Ib.1=1
n1=length(heights_u)
Ix.1 = n1/var(heights_u)
pos1.mean=((mean(heights_u))*Ix.1)/(Ib.1+Ix.1)
pos1.var = 1/(Ib.1+Ix.1)
posterior.mu1 = rnorm(100,pos1.mean,sqrt(pos1.var))
Ib.2=1
n2=length(heights_n)
Ix.2 = n2/var(heights_n)
pos2.mean=((mean(heights_n))*Ix.2)/(Ib.2+Ix.2)
pos2.var = 1/(Ib.2+Ix.2)
posterior.mu2 = rnorm(100,pos2.mean,sqrt(pos2.var))
pos3.mean = pos1.mean-pos2.mean
pos3.var = posterior.mu1+pos2.var
posterior.mu1.mu2 = rnorm(100,pos3.mean,sqrt(pos3.var))
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
hist(posterior.mu1)
hist(posterior.mu2)
hist(posterior.mu2)
Ib.2=1
n2=length(heights_n)
Ix.2 = n2/var(heights_n)
pos2.mean=((mean(heights_n))*Ix.2)/(Ib.2+Ix.2)
pos2.var = 1/(Ib.2+Ix.2)
posterior.mu2 = rnorm(100,pos2.mean,sqrt(pos2.var))
mean(posterior.mu2)
hist(posterior.mu2)
#posterior of mu1-mu2
pos3.mean = pos1.mean-pos2.mean
pos3.var = posterior.mu1+pos2.var
posterior.mu1.mu2 = rnorm(100,pos3.mean,sqrt(pos3.var))
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
mean(posterior.mu1.mu2)
#posterior of mu1-mu2
pos3.mean = pos1.mean-pos2.mean
pos3.mean
#posterior of mu1-mu2
pos3.mean = pos1.mean-pos2.mean
pos3.var = pos1.var+pos2.var
posterior.mu1.mu2 = rnorm(100,pos3.mean,sqrt(pos3.var))
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
#Bayesian Analysis
#posterior of mu1
Ib.1=1
n1=length(heights_f)
Ix.1 = n1/var(heights_f)
pos1.mean=((mean(heights_f))*Ix.1)/(Ib.1+Ix.1)
pos1.var = 1/(Ib.1+Ix.1)
posterior.mu1 = rnorm(100,pos1.mean,sqrt(pos1.var))
#posterior of mu2
Ib.2=1
n2=length(heights_m)
Ix.2 = n2/var(heights_m)
pos2.mean=((mean(heights_m))*Ix.2)/(Ib.2+Ix.2)
pos2.var = 1/(Ib.2+Ix.2)
posterior.mu2 = rnorm(100,pos2.mean,sqrt(pos2.var))
#posterior of mu1-mu2
pos3.mean = pos1.mean-pos2.mean
pos3.var = pos1.var+pos2.var
posterior.mu1.mu2 = rnorm(100,pos3.mean,sqrt(pos3.var))
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
mean(posterior.mu1.mu2)
mle1<-xf_hat-xm_hat
heights_u<-BMI$Height[BMI$Category=='Underweight']
heights_n<-BMI$Height[BMI$Category=='Normal weight']
xu_hat<-mean(heights_u)
xn_hat<-mean(heights_n)
vu<-var(heights_u)/length(heights_u)
vn<-var(heights_n)/length(heights_n)
x.uw<- rnorm(100,xu_hat,sqrt(vu))
mean.boot.uw<-bootstrap(x.uw, nboot = 3200, mean)
hist(mean.boot.uw$thetastar)
var(mean.boot.uw$thetastar)
theta.hat_Pbootstrap_se=sqrt(var(mean.boot.uw$thetastar))
#1. Normal Method
NPbootstrap_CI<-c(xu_hat-2*theta.hat_Pbootstrap_se,xu_hat+2*theta.hat_Pbootstrap_se)
#2. Pivotal Method
pivatol.ci<-c(2*xu_hat-quantile(mean.boot.uw$thetastar,0.975), 2*xu_hat-quantile(mean.boot.uw$thetastar,0.025))
#3. Quantile Method
quantile.ci<-quantile(mean.boot.uw$thetastar, c(0.025, 0.975))
xu_hat
NPbootstrap_CI
pivatol.ci
quantile.ci
x.uw<- rnorm(100,xu_hat,sqrt(vu))
x.uw<- rnorm(100,xu_hat,sqrt(vu))
#Heights of Underweight
#NonParametric Boostrap for mean values
#Heights of Underweight
xu_hat
NPbootstrap_CI
pivatol.ci
quantile.ci
x.uw<- rnorm(100,xu_hat,sqrt(vu))
x.nw<- rnorm(100,xn_hat,sqrt(vn))
theta<-function(x){mean(x.uw)-mean(x.nw)}
nu<-length(heights_u)
nn<-length(heights_n)
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap=vector()
for(i in 1:3000){
X<-rnorm(nu,xu_hat,sqrt(vu))
Y<-rnorm(nn,xn_hat,sqrt(vn))
theta.hat_Pbootstrap[i]=mean(X)-mean(Y)
}
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
theta_hat
theta.hat_Pbootstrap=vector()
for(i in 1:3000){
X<-rnorm(nu,xu_hat,sqrt(vu))
Y<-rnorm(nn,xn_hat,sqrt(vn))
theta.hat_Pbootstrap[i]=mean(X)-mean(Y)
}
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#3. Quantile Method
quantile.ci<-quantile(mean.boot$thetastar, c(0.025, 0.975))
theta_hat
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#3. Quantile Method
quantile.ci<-quantile(theta.hat_Pbootstrap, c(0.025, 0.975))
#2. Pivotal Method
pivatol.ci<-c(2*theta_hat-quantile(theta.hat_Pbootstrap,0.975), 2*theta_hat-quantile(theta.hat_Pbootstrap,0.025))
theta_hat
Pbootstrap_CI
pivatol.ci
quantile.ci
theta.hat_Pbootstrap=vector()
#NonParametric Boostrap for mean values
#Heights of Underweight and Normal weight
theta_hat
Pbootstrap_CI
pivatol.ci
quantile.ci
#Parametric Boostrap for mean values
#Heights of Underweight and Normal weight
theta_hat
Pbootstrap_CI
pivatol.ci
quantile.ci
x.uw<- rnorm(nu,xu_hat,sqrt(vu))
x.nw<- rnorm(nn,xn_hat,sqrt(vn))
for(i in 1:3000){
theta.hat_Pbootstrap[i]=mean(x.uw)-mean(x.nw)
}
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
hist(theta.hat_Pbootstrap)
var(theta.hat_Pbootstrap)
theta.hat_Pbootstrap
for(i in 1:3000){
x.uw<- sample(heights_u,nu,replace=T)
x.nw<- sample(heights_n,nn,replace=T)
theta.hat_Pbootstrap[i]=mean(x.uw)-mean(x.nw)
}
hist(theta.hat_Pbootstrap)
var(theta.hat_Pbootstrap)
theta.hat_Pbootstrap_se=sqrt(var(theta.hat_Pbootstrap))
mean(theta.hat_Pbootstrap)
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
mean(theta.hat_Pbootstrap)
hist(theta.hat_Pbootstrap)
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#2. Pivotal Method
pivatol.ci<-c(2*theta_hat-quantile(theta.hat_Pbootstrap,0.975), 2*theta_hat-quantile(theta.hat_Pbootstrap,0.025))
#3. Quantile Method
quantile.ci<-quantile(theta.hat_Pbootstrap, c(0.025, 0.975))
theta_hat
NPbootstrap_CI
pivatol.ci
quantile.ci
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
#1. Normal Method
NPbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
NPbootstrap_CI
mean(theta.hat_Pbootstrap)
theta_hat=xu_hat-xn_hat
theta_hat
NPbootstrap_CI
pivatol.ci
quantile.ci
theta.hat_Pbootstrap_se
for(i in 1:3000){
x.uw<- sample(heights_u,nu,replace=T)
x.nw<- sample(heights_n,nn,replace=T)
theta.hat_Pbootstrap[i]=mean(x.uw)-mean(x.nw)
}
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
theta.hat_Pbootstrap_se
theta.hat_Pbootstrap_se
mean(theta.hat_Pbootstrap)
heights_u<-BMI$Height[BMI$Category=='Underweight']
heights_n<-BMI$Height[BMI$Category=='Normal weight']
xu_hat<-mean(heights_u)
xn_hat<-mean(heights_n)
nu<-length(heights_u)
nn<-length(heights_n)
vu<-var(heights_u)/nu
vn<-var(heights_n)/nn
#NonParametric Boostrap for mean values
#Heights of Underweight and Normal weight
for(i in 1:3000){
x.uw<- sample(heights_u,nu,replace=T)
x.nw<- sample(heights_n,nn,replace=T)
theta.hat_NPbootstrap[i]=mean(x.uw)-mean(x.nw)
}
theta_hat=xu_hat-xn_hat
theta.hat_NPbootstrap_se=sd(theta.hat_NPbootstrap)
mean(theta.hat_NPbootstrap)
hist(theta.hat_NPbootstrap)
#Confidence Interval
#1. Normal Method
NPbootstrap_CI<-c(theta_hat-2*theta.hat_NPbootstrap_se,theta_hat+2*theta.hat_NPbootstrap_se)
#2. Pivotal Method
NP_pivatol.CI<-c(2*theta_hat-quantile(theta.hat_NPbootstrap,0.975), 2*theta_hat-quantile(theta.hat_NPbootstrap,0.025))
#3. Quantile Method
NP_quantile.CI<-quantile(theta.hat_NPbootstrap, c(0.025, 0.975))
#Parametric Boostrap for mean values
#Heights of Underweight and Normal weight
theta.hat_Pbootstrap=vector()
for(i in 1:3000){
X<-rnorm(nu,xu_hat,sqrt(vu))
Y<-rnorm(nn,xn_hat,sqrt(vn))
theta.hat_Pbootstrap[i]=mean(X)-mean(Y)
}
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
#Confidence Interval
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#2. Pivotal Method
pivatol.ci<-c(2*theta_hat-quantile(theta.hat_Pbootstrap,0.975), 2*theta_hat-quantile(theta.hat_Pbootstrap,0.025))
#3. Quantile Method
quantile.ci<-quantile(theta.hat_Pbootstrap, c(0.025, 0.975))
rm(list=ls())
library(readxl)
BMI<-read_excel("C:/Users/Rashu/Desktop/Assignments/flex2/Probability Models/project/BMI.xlsx")
library(bootstrap)
heights_u<-BMI$Height[BMI$Category=='Underweight']
heights_n<-BMI$Height[BMI$Category=='Normal weight']
xu_hat<-mean(heights_u)
xn_hat<-mean(heights_n)
nu<-length(heights_u)
nn<-length(heights_n)
vu<-var(heights_u)/nu
vn<-var(heights_n)/nn
#NonParametric Boostrap for mean values
#Heights of Underweight and Normal weight
for(i in 1:3000){
x.uw<- sample(heights_u,nu,replace=T)
x.nw<- sample(heights_n,nn,replace=T)
theta.hat_NPbootstrap[i]=mean(x.uw)-mean(x.nw)
}
theta_hat=xu_hat-xn_hat
theta.hat_NPbootstrap_se=sd(theta.hat_NPbootstrap)
mean(theta.hat_NPbootstrap)
hist(theta.hat_NPbootstrap)
#Confidence Interval
#1. Normal Method
NPbootstrap_CI<-c(theta_hat-2*theta.hat_NPbootstrap_se,theta_hat+2*theta.hat_NPbootstrap_se)
#2. Pivotal Method
NP_pivatol.CI<-c(2*theta_hat-quantile(theta.hat_NPbootstrap,0.975), 2*theta_hat-quantile(theta.hat_NPbootstrap,0.025))
#3. Quantile Method
NP_quantile.CI<-quantile(theta.hat_NPbootstrap, c(0.025, 0.975))
#Parametric Boostrap for mean values
#Heights of Underweight and Normal weight
theta.hat_Pbootstrap=vector()
for(i in 1:3000){
X<-rnorm(nu,xu_hat,sqrt(vu))
Y<-rnorm(nn,xn_hat,sqrt(vn))
theta.hat_Pbootstrap[i]=mean(X)-mean(Y)
}
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
#Confidence Interval
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#2. Pivotal Method
pivatol.ci<-c(2*theta_hat-quantile(theta.hat_Pbootstrap,0.975), 2*theta_hat-quantile(theta.hat_Pbootstrap,0.025))
#3. Quantile Method
quantile.ci<-quantile(theta.hat_Pbootstrap, c(0.025, 0.975))
theta.hat_NPbootstrap=vector()
for(i in 1:3000){
x.uw<- sample(heights_u,nu,replace=T)
x.nw<- sample(heights_n,nn,replace=T)
theta.hat_NPbootstrap[i]=mean(x.uw)-mean(x.nw)
}
theta_hat=xu_hat-xn_hat
theta.hat_NPbootstrap_se=sd(theta.hat_NPbootstrap)
mean(theta.hat_NPbootstrap)
hist(theta.hat_NPbootstrap)
#Confidence Interval
#1. Normal Method
NPbootstrap_CI<-c(theta_hat-2*theta.hat_NPbootstrap_se,theta_hat+2*theta.hat_NPbootstrap_se)
#2. Pivotal Method
NP_pivatol.CI<-c(2*theta_hat-quantile(theta.hat_NPbootstrap,0.975), 2*theta_hat-quantile(theta.hat_NPbootstrap,0.025))
#3. Quantile Method
NP_quantile.CI<-quantile(theta.hat_NPbootstrap, c(0.025, 0.975))
theta.hat_Pbootstrap=vector()
for(i in 1:3000){
X<-rnorm(nu,xu_hat,sqrt(vu))
Y<-rnorm(nn,xn_hat,sqrt(vn))
theta.hat_Pbootstrap[i]=mean(X)-mean(Y)
}
theta_hat=xu_hat-xn_hat
theta.hat_Pbootstrap_se=sd(theta.hat_Pbootstrap)
#Confidence Interval
#1. Normal Method
Pbootstrap_CI<-c(theta_hat-2*theta.hat_Pbootstrap_se,theta_hat+2*theta.hat_Pbootstrap_se)
#2. Pivotal Method
pivatol.ci<-c(2*theta_hat-quantile(theta.hat_Pbootstrap,0.975), 2*theta_hat-quantile(theta.hat_Pbootstrap,0.025))
#3. Quantile Method
quantile.ci<-quantile(theta.hat_Pbootstrap, c(0.025, 0.975))
z<-(xu_hat-xn_hat)/sqrt(vu+vn)
z
2*(1-pnorm(abs(z)))
Ib.1=1
n1=length(heights_u)
Ix.1 = n1/var(heights_u)
pos1.mean=((mean(heights_u))*Ix.1)/(Ib.1+Ix.1)
pos1.var = 1/(Ib.1+Ix.1)
posterior.mu1 = rnorm(100,pos1.mean,sqrt(pos1.var))
mean(posterior.mu1)
hist(posterior.mu1)
#posterior of mu2
Ib.2=1
n2=length(heights_n)
Ix.2 = n2/var(heights_n)
pos2.mean=((mean(heights_n))*Ix.2)/(Ib.2+Ix.2)
pos2.var = 1/(Ib.2+Ix.2)
posterior.mu2 = rnorm(100,pos2.mean,sqrt(pos2.var))
mean(posterior.mu2)
hist(posterior.mu2)
pos3.mean = pos1.mean-pos2.mean
pos3.var = posterior.mu1+pos2.var
posterior.mu1.mu2 = rnorm(100,pos3.mean,sqrt(pos3.var))
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
#Mean
MLE_Mean<-xu_hat-xn_hat
MLE_Mean
xu_hat
xn_hat
mean(posterior.mu1.mu2)
hist(posterior.mu1.mu2)
hist(heights_u)
par(frow(c(3,2)))
par.frow(c(3,2)))
par.frow(c(3,2))
par(frow=c(3,2))
par(mfrow=c(3,2))
hist(heights_u)
hist(rnorm(nu,0,1))
hist(posterior.mu1)
par(mfrow=c(2,3))
hist(rnorm(nu,0,1))
hist(heights_u)
hist(posterior.mu1)
hist(rnorm(nu,0,1))
hist(heights_n)
hist(posterior.mu2)
hist(posterior.mu1.mu2)
qqnorm(posterior.mu1.mu2)
par(mfrow=c(1,2))
hist(posterior.mu1.mu2)
qqnorm(posterior.mu1.mu2)
MLE_Mean<-xu_hat-xn_hat
#Standard deviation
MLE_SD_U<-(1/length(heights_u))*sum(x-xu_hat)^2
MLE_SD_N<-(1/length(heights_n))*sum(x-xn_hat)^2
MLE_SD<-MLE_SD_U-MLE_SD_N
require(gtools)
totalData<-c(heights_u,heights_n)
x<- rnorm(100,mean=mean(Height),sd=sd(Height))
n<-length(BMI$Height)
perm.matrix<-t(replicate(5000,sample(n)))
perm.T<-apply(perm.matrix,1,function(x){abs(mean(totalData[x[1:7423]])-mean(totalData[x[7424:25000]]))})
p.value<-mean(perm.T>abs(xu_hat-xn_hat))
p.value
#Mean
MLE_Mean<-xu_hat-xn_hat
#Standard deviation
MLE_SD_U<-(1/length(heights_u))*sum(x-xu_hat)^2
MLE_SD_N<-(1/length(heights_n))*sum(x-xn_hat)^2
MLE_SD<-MLE_SD_U-MLE_SD_N
MLE_Mean
MLE_SD
?credal
??credal
?signature
signature(heights,1,BMI)
signature(heights,1,BMI$BMI)
signature(BMI$Height,1,BMI$BMI)
credal(BMI$Height,1,BMI$BMI)
credal(as.vector(BMI$Height),1,BMI$BMI)
signature(as.vector(BMI$Height),1,BMI$BMI)
signature
?signature
install(EvcombR)
install.packages("EvcombR")
install.packages("EvCombR")
library(EvCombR)
library(EvCombR)
signature(as.vector(BMI$Height),1,BMI$BMI)
?credal
# state space
stateSpace <- c("a", "b", "c")
# lower and upper bounds for probability intervals
c1 <- credal(c(0.1, 0.1, 0.1), c(0.8, 0.8, 0.8), stateSpace)
# single probability function (lower and upper bounds of probability intervals are equal)
c2 <- credal(c(0.1, 0.2, 0.7), c(0.1, 0.2, 0.7), stateSpace)
c1
# lower and upper bounds for probability intervals
c1 <- credal(c(0.1, 0.1, 0.1), c(1, 0.8, 0.8), stateSpace)
c1
# lower and upper bounds for probability intervals
c1 <- credal(c(0.1, 0.1, 0.1), c(1, 1, 1), stateSpace)
c1
# lower and upper bounds for probability intervals
c1 <- credal(c(1,1,1), c(1, 1, 1), stateSpace)
# lower and upper bounds for probability intervals
c1 <- credal(c(0.1,1,1), c(0.9, 1, 1), stateSpace)
# lower and upper bounds for probability intervals
c1 <- credal(c(0.1,.1,.1), c(0.9, 0.9,0.9), stateSpace)
c1
# lower and upper bounds for probability intervals
c1 <- credal(c(0.2.1,.1), c(0.9, 0.9,0.9), stateSpace)
# lower and upper bounds for probability intervals
c1 <- credal(c(0.2,1,.1), c(0.9, 0.9,0.9), stateSpace)
# lower and upper bounds for probability intervals
c1 <- credal(c(0.2,1,.1), c(0.8, 0.9,0.9), stateSpace)
# lower and upper bounds for probability intervals
c1 <- credal(c(0.2,0.1,.1), c(0.8, 0.9,0.9), stateSpace)
c1
# construct a state space
stateSpace <- c("a", "b", "c")
# construct credal sets with the given state space
c1 <- credal(c(0.1, 0.1, 0.1), c(0.8, 0.8, 0.8), stateSpace)
c2 <- credal(c(0.2, 0.2, 0.2), c(0.9, 0.9, 0.9), stateSpace)
# combine the credal sets
cComb(c1, c2)
# construct mass functions
m1 <- mass(list("a"=0.1, "b"=0.1 , "c"=0.4, "a/b/c"=0.4), stateSpace)
m2 <- mass(list("a"=0.2, "b"=0.2, "c"=0.2, "a/b/c"=0.4), stateSpace)
# combine the mass functin by using Dempster's combination
dComb(m1, m2)
# Yager's combination operator
yComb(m1, m2)
# modified Dempster's combination using uniform prior
mComb(m1, m2)
# modified Dempster's combination using uniform prior
mComb(m1, m2)
hist(Height)
source('C:/Users/Rashu/Downloads/PROJECT.R', echo=TRUE)
library(knitr)
stitch(PROJECT.R)
stitch("PROJECT.R")
source('C:/Users/Rashu/Downloads/PROJECT.R')
library(knitr)
stitch("PROJECT.R")
?stitch
source('C:/Users/Rashu/Downloads/PROJECT.R')
?stitch("C:/Users/Rashu/Downloads/PROJECT.R")
stitch("C:/Users/Rashu/Downloads/PROJECT.R")
source('C:/Users/Rashu/Downloads/PROJECT.R')
BMI<-read_excel("C:/Users/Rashu/Desktop/Assignments/flex2/Probability Models/project/BMI.xlsx")
par(mfrow=c(3,3))
hist(BMI$Height)
hist(Weight)
hist(BMI$BMI)
qqnorm(Height)
qqnorm(Weight)
qqnorm(BMI$BMI)
boxplot(Height)
boxplot(Weight)
boxplot(BMI$BMI)
hist(heights_n)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
hist(heights_u)
hist(heights_n)
hist(heights_n,main='Heights distribution of Underweight children')
hist(heights_n,main='Heights distribution of Underweight')
par(mfrow=c(1,2))
hist(heights_u,main='Heights distribution of Underweight')
hist(heights_n,main='Heights distribution of Normal weight')
source('C:/Users/Rashu/Downloads/PROJECT.R')
